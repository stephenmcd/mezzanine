#
msgid ""
msgstr ""
"Project-Id-Version: Mezzanine 3.1.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-08-19 13:59-0600\n"
"PO-Revision-Date: 2014-08-20 16:47-0600\n"
"Last-Translator: Eduardo Rivas <jerivasmelgar@gmail.com>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 1.5.4\n"

#: ../admin-customization.rst:3
msgid "Admin Customization"
msgstr "Personalización de la interfaz administrativa"

#: ../admin-customization.rst:5
msgid ""
"Mezzanine uses the standard `Django admin interface <http://docs."
"djangoproject.com/en/dev/ref/contrib/admin/>`_ allowing you to add admin "
"classes as you normally would with a Django project, but also provides the "
"following enhancements to the admin interface that are configurable by the "
"developer."
msgstr ""
"Mezzanine utiliza la `interfaz de administrativa de Django <http://docs."
"djangoproject.com/en/dev/ref/contrib/admin/>`_ permitiendo a los "
"desarrolladores añadir clases admin como lo harían normalmente en un "
"proyecto Django, pero también provee las mejoras descritas a continuación "
"que son configurables por el desarrollador."

#: ../admin-customization.rst:12
msgid "Navigation"
msgstr "Navegación"

#: ../admin-customization.rst:14
msgid ""
"When first logging into the standard Django admin interface a user is "
"presented with the list of models that they have permission to modify data "
"for. Mezzanine takes this feature and uses it to provide a navigation menu "
"that persists across every section of the admin interface making the list of "
"models always accessible."
msgstr ""
"Al iniciar sesión por primera vez en la interfaz administrativa de Django, "
"se le presenta al usuario una lista de los modelos de los cuales tiene "
"permiso de edición. Mezzanine toma esta característica y la utiliza para "
"proveer un menú de navegación que persiste por todas las secciones de la "
"interfaz administrativa, haciendo que la lista de modelos este siempre "
"disponible."

#: ../admin-customization.rst:20
msgid ""
"Using the standard Django admin the grouping and ordering of these models "
"aren't configurable, so Mezzanine provides the setting ``ADMIN_MENU_ORDER`` "
"that can be used to control the grouping and ordering of models when listed "
"in the admin area."
msgstr ""
"La interfaz administrativa estándar de Django no permite agrupar ni ordenar "
"estos modelos, por lo cual Mezzanine provee la variable de configuración "
"``ADMIN_MENU_ORDER`` que es utilizada para controlar la agrupación y el "
"orden de los modelos mostrados en la lista de la interfaz administrativa."

#: ../admin-customization.rst:25
msgid ""
"This setting is a sequence of pairs where each pair represents a group of "
"models. The first item in each pair is the name to give the group and the "
"second item is the sequence of app/model names to use for the group. The "
"ordering of both the groups and their models is maintained when they are "
"displayed in the admin area."
msgstr ""
"Esta variable de configuración es una secuencia de parejas, donde cada "
"pareja representa un grupo de modelos. El primer elemento de cada pareja es "
"el nombre del grupo, y el segundo es la secuencia de nombres de apps/modelos "
"que pertenecen a ese grupo. Tanto el orden de los grupos como el de sus "
"modelos se mantiene cuando se muestran en la interfaz administrativa."

#: ../admin-customization.rst:31
msgid ""
"For example, to specify two groups ``Content`` and ``Site`` in your admin "
"with the first group containing models from Mezzanine's ``pages`` and "
"``blog`` apps, and the second with the remaining models provided by Django, "
"you would define the following in your projects's ``settings`` module::"
msgstr ""
"Por ejemplo, para especificar dos grupos llamados ``Contenido`` y ``Sitio``, "
"con el primer grupo compuesto por los modelos de Mezzanine ``pages`` y "
"``blog``, y el segundo por los modelos restantes provistos por Django, se "
"puede definir lo siguiente en el módulo ``settings`` del proyecto::"

#: ../admin-customization.rst:41
msgid ""
"Any admin classes that aren't specifed are included using Django's normal "
"approach of grouping models alphabetically by application name. You can also "
"control this behavior by implementing a ``in_menu`` method on your admin "
"class, which should return ``True`` or ``False``. When implemented, this "
"method controls whether the admin class appears in the menu or not. Here's "
"an advanced example that excludes the ``BlogCategoryAdmin`` class from the "
"menu, unless it is explicitly defined in ``ADMIN_MENU_ORDER``::"
msgstr ""
"Cualquier clase admin que no sea especificada será incluída agrupando los "
"modelos alfabeticamente y por nombre de aplicación, como lo hace Django por "
"defecto. También se puede controlar este comportamiento implementando el "
"método ``in_menu`` en una clase admin, que debe retornar True o False. Este "
"método controla si una clase admin aparecerá en el menú o no. A continuación "
"se muestra un ejemplo más avanzado que excluye la clase "
"``BlogCategoryAdmin`` del menú, a menos que se incluya de manera explícita "
"en ``ADMIN_MENU_ORDER``::"

#: ../admin-customization.rst:68
msgid "Custom Items"
msgstr "Elementos personalizados"

#: ../admin-customization.rst:70
msgid ""
"It is possible to inject custom navigation items into the "
"``ADMIN_MENU_ORDER`` setting by specifying an item using a two item "
"sequence, the first item containing the title and second containing the "
"named urlpattern that resolves to the url to be used."
msgstr ""
"Es posible insertar elementos de navegación personalizados en la variable de "
"configuración ``ADMIN_MENU_ORDER`` al especificar una secuencia de dos "
"elementos. El primer elemento contiene el título y el segundo el urlpattern "
"con nombre que resuelve la url deseada."

#: ../admin-customization.rst:75
msgid ""
"Continuing on from the previous example, Mezzanine includes a fork of the "
"popular `django-filebrowser <http://code.google.com/p/django-filebrowser/>`_ "
"application which contains a named urlpattern ``fb_browse`` and is given the "
"title ``Media Library`` to create a custom navigation item::"
msgstr ""
"Siguiendo con el ejemplo anterior, Mezzanine incluye un fork de la popular "
"aplicación `django-filebrowser <http://code.google.com/p/django-filebrowser/"
">` _, que contiene el urlpattern con nombre ``fb_browse`` y al que se le da "
"el título ``Biblioteca de medios`` para crear un elemento personalizado de "
"navegación::"

#: ../admin-customization.rst:86
msgid ""
"You can also use this two-item sequence approach for regular app/model names "
"if you'd like to give them a custom title."
msgstr ""
"También se puede utilizar este enfoque de parejas de elementos para apps/"
"modelos comunes si se quisiera darles un título personalizado."

#: ../admin-customization.rst:90
msgid "Dashboard"
msgstr "Tablero"

#: ../admin-customization.rst:92
msgid ""
"When using the standard Django admin interface, the dashboard area shown "
"when a user first logs in provides the list of available models and a list "
"of the user's recent actions. Mezzanine makes this dashboard configurable by "
"the developer by providing a system for specifying Django `Inclusion Tags "
"<http://docs.djangoproject.com/en/dev/howto/custom-template-tags/#inclusion-"
"tags>`_ that will be displayed in the dashboard area."
msgstr ""
"Al utilizar la interfaz administrativa de Django, el tablero se muestra "
"cuando el usuario inicia sesión e incluye una lista de modelos y de las "
"acciones recientes del usuario. Mezzanine permite al desarrollador "
"configurar el tablero proyendo un sistema para especificar `Inclusion Tags "
"<http://docs.djangoproject.com/en/dev/howto/custom-template-tags/#inclusion-"
"tags>`_ de Django para mostrarlas en el área del tablero."

#: ../admin-customization.rst:99
msgid ""
"The dashboard area is broken up into three columns, the first being wide and "
"the second and third being narrow. Mezzanine then provides the setting "
"``DASHBOARD_TAGS`` which is a sequence of three sequences - one for each the "
"three columns. Each sequence contains the names of the inclusion tags in the "
"format ``tag_lib.tag_name`` that will be rendered in each of the columns ."
msgstr ""
"El área del tablero se divide en tres columnas, donde la primera es ancha y "
"las otras dos angostas. Mezzanine provee la variable de configuración "
"``DASHBOARD_TAGS``, que es una secuencia de tres secuencias - una por cada "
"una de las tres columnas. Cada secuencia contiene los nombres de las "
"inclusion tags en el formato ``tag_lib.tag_name`` que será renderizadas en "
"cada columna."

#: ../admin-customization.rst:106
msgid ""
"The list of models and recent actions normally found in the Django admin are "
"available as inclusion tags via ``mezzanine_tags.app_list`` and "
"``mezzanine_tags.recent_actions`` respectively. For example, to configure "
"the dashboard with a blog form above the model list in the first column, a "
"list of recent comments in the second column and the recent actions list in "
"the third column, you would define the following in your projects's "
"``settings`` module::"
msgstr ""
"La lista de modelos y acciones recientes provistas por Django están "
"disponibles como inclusion tagas a través de ``mezzanine_tags.app_list`` y "
"``mezzanine_tags.recent_actions`` respectivamente. Por ejemplo, para "
"configurar el tablero con un formulario para blog sobre la lista de modelos "
"en la primera columna, una lista de comentarios recientes en la segunda "
"columna, y la lista de acciones recientes en la tercera columna, se puede "
"definir lo siguiente en el módulo ``settings`` del proyecto::"

#: ../admin-customization.rst:120
msgid ""
"Here we can see the ``quick_blog`` inclusion tag provided by the ``mezzanine."
"blog.templatetags.blog_tags`` module and the ``recent_comments`` inclusion "
"tag provided by the ``mezzanine.generic.templatetags.comment_tags`` module."
msgstr ""
"Aquí se puede ver la inclusion tag ``quick_blog`` provista por el módulo "
"``mezzanine.blog.templatetags.blog_tags``, y la inclusion tag "
"``recent_comments`` provista por el módulo ``mezzanine.generic.templatetags."
"comment_tags``."

#: ../admin-customization.rst:126
msgid "WYSIWYG Editor"
msgstr "Editor LQVELQO"

#: ../admin-customization.rst:128
msgid ""
"By default, Mezzanine uses the `TinyMCE editor <http://tinymce.moxiecode.com/"
">`_ to provide rich editing for all model fields of the type ``mezzanine."
"core.fields.RichTextField``. The setting ``RICHTEXT_WIDGET_CLASS`` contains "
"the import path to the widget class that will be used for editing each of "
"these fields, which therefore provides the ability for implementing your own "
"editor widget which could be a modified version of TinyMCE, a different "
"editor or even no editor at all."
msgstr ""
"Por defecto, Mezzanine utiliza el `editor TinyMCE <http://tinymce.moxiecode."
"com/>`_ para proveer edición de texto enriquecido a todos los campos del "
"tipo ``mezzanine.core.fields.RichTextField``. La variable de configuración "
"``RICHTEXT_WIDGET_CLASS`` contiene la ruta de importación de la clase de "
"widget utilizada para editar este tipo de campos. Esto abre la posibilidad "
"de implementar widgets de edición de texto personalizados que pueden "
"contener una versión modificada de TinyMCE, un editor diferente o incluso "
"remover el editor por completo."

#: ../admin-customization.rst:139
msgid ""
"If you'd only like to customize the TinyMCE options specified in its "
"JavaScript setup, you can do so via the ``TINYMCE_SETUP_JS`` setting which "
"lets you specify the URL to your own TinyMCE setup JavaScript file."
msgstr ""
"En caso de sólo quere modificar las opciones de TinyMCE especificadas en su "
"configuración Javascript, se puede lograr a través de la variable de "
"configuración ``TINYMCE_SETUP_JS`` que especifica la URL a un archivo "
"Javascript con la configuración personalizada para TinyMCE."

#: ../admin-customization.rst:144
msgid ""
"The default value for the ``RICHTEXT_WIDGET_CLASS`` setting is the string ``"
"\"mezzanine.core.forms.TinyMceWidget\"``. The ``TinyMceWidget`` class "
"referenced here provides the necessary media files and HTML for implementing "
"the TinyMCE editor, and serves as a good reference point for implementing "
"your own widget class which would then be specified via the "
"``RICHTEXT_WIDGET_CLASS`` setting."
msgstr ""
"El valor por defecto para la variable de configuración "
"``RICHTEXT_WIDGET_CLASS`` es la cadena ``\"mezzanine.core.forms.TinyMceWidget"
"\"``. La clase ``TinyMceWidget`` a la que se hace referencia aquí provee los "
"archivos y el HTML necesarios para implementar el editor TinyMCE, y sirve "
"como un buen punto de referencia para implementar clases de widget "
"personalizadas, las cuales se pueden especificar en la variable de "
"configuración ``RICHTEXT_WIDGET_CLASS``."

#: ../admin-customization.rst:151
msgid ""
"In addition to ``RICHTEXT_WIDGET_CLASS`` you may need to customize the way "
"your content is rendered at the template level. Post processing of the "
"content can be achieved through the ``RICHTEXT_FILTERS`` setting, which is a "
"sequence of string, each one containing the dotted path to a Python "
"function, that will be used as a processing pipeline for the content. Think "
"of them like Django's middleware or context processors."
msgstr ""
"Además de ``RICHTEXT_WIDGET_CLASS`` es posible que sea necesario "
"personalizar la forma en que el contenido es renderizado a nivel de "
"plantilla. El post-procesamiento del contenido puede lograrse a través de la "
"variable de configuración ``RICHTEXT_FILTERS``, que es una secuencia de "
"cadenas donde cada una contiene la ruta punteada a una función Python que "
"será utilizada para procesar el contenido. Esta característica es comparable "
"al middleware o procesadores de contexto de Django."

#: ../admin-customization.rst:158
msgid ""
"Say, for example, you had a ``RICHTEXT_WIDGET_CLASS`` that allowed you to "
"write your content in a popular wiki syntax such as markdown. You'd need a "
"way to convert that wiki syntax into HTML right before the content was "
"rendered::"
msgstr ""
"Por ejemplo, si en ``RICHTEXT_WIDGET_CLASS`` se ha especificado un widget "
"que permite editar el contenido utilizando Markdown (un lenguaje popular en "
"el mundo de las wikis); será necesario convertir esa sintaxis de wiki en "
"HTML antes de que el contenido sea renderizado::"

#: ../admin-customization.rst:177
msgid ""
"With the above, you'd now see the converted HTML content rendered to the "
"template, rather than the raw markdown formatting."
msgstr ""
"Con este cambio se vería el contenido HTML renderizado en la plantilla, en "
"lugar de ver la sintaxis Markdown en bruto."

#: ../admin-customization.rst:181
msgid "Media Library Integration"
msgstr "Integración de la biblioteca de medios"

#: ../admin-customization.rst:183
msgid ""
"Mezzanine's Media Library (based on django-filebrowser) provides a `jQuery "
"UI <http://jqueryui.com/>`_ `dialog <http://jqueryui.com/dialog/>`_ that can "
"be used by custom widgets to allow users to select previously uploaded files."
msgstr ""
"La librería de medios de Mezzanine (basada en django-filebrowser) provee un "
"`diálogo <http://jqueryui/dialog/>` _ `jQuery UI <http://jqueryui.com/>` _ "
"que puede ser utilizado por widgets personalizados para permitir a los "
"usuarios archivos subidos previamente."

#: ../admin-customization.rst:187
msgid ""
"When using a custom widget for the WYSIWYG editor via the "
"``RICHTEXT_WIDGET_CLASS`` setting, you can show the Media Library dialog "
"from your custom widget, by doing the following:"
msgstr ""
"Cuando se utiliza un widget personalizado para el editor LQVELQO a través de "
"la variable de configuración ``RICHTEXT_WIDGET_CLASS``, se puede mostar el "
"diálogo de la Biblioteca de medios haciendo lo siguiente:"

#: ../admin-customization.rst:191
msgid ""
"Load the following media resources in your widget, perhaps using a `Django "
"Media inner class <https://docs.djangoproject.com/en/dev/topics/forms/media/"
">`_:"
msgstr ""
"Carga los siguientes recursos de medios en el widget, quizá utilizando la "
"clase `Medios internos de Django <https://docs.djangoproject.com/en/dev/"
"topics/forms/media/>` _:"

#: ../admin-customization.rst:196
msgid "``filebrowser/css/smoothness/jquery-ui-1.9.1.custom.min.css``"
msgstr "``filebrowser/css/smoothness/jquery-ui-1.9.1.custom.min.css``"

#: ../admin-customization.rst:202
msgid ""
"Call the JavaScript function ``browseMediaLibrary`` to show the dialog. The "
"function is defined in ``filebrowser/js/filebrowser-popup.js``, and takes "
"the following two arguments:"
msgstr ""
"Llama la función Javascript ``browseMediaLibrary`` para mostar el díalogo. "
"La función está definida en ``filebrowser/js/filebrowser-popup.js``, y toma "
"estos argumentos:"

#: ../admin-customization.rst:208
msgid ""
"The function that will be called after the dialog is closed. The function "
"will be called with a single argument, which will be:"
msgstr ""
"La función será llamada después de que el diálogo haya sido cerrado, y será "
"llamada con un solo argumento, que será:"

#: ../admin-customization.rst:211
msgid ""
"null: if no selection was made (e.g. dialog is closed by hitting `ESC`), or"
msgstr ""
"null: si no se hizo ninguna selección (p. e. el diálogo se cerró presionando "
"`ESC`), o"

#: ../admin-customization.rst:213
msgid "the path of the selected file."
msgstr "la ruta al archivo seleccionado."

#: ../admin-customization.rst:215
msgid "Type of files that are selectable in the dialog. Defaults to image."
msgstr ""
"Tipos de archivos que pueden seleccionarse a través del diálogo. Por "
"defecto: imagen."
