#
# Eduardo Rivas <jerivasmelgar@gmail.com>, 2014.
#
msgid ""
msgstr ""
"Project-Id-Version: Mezzanine 3.1.9\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-08-19 13:59-0600\n"
"PO-Revision-Date: 2014-12-01 19:06-0600\n"
"Last-Translator: Eduardo Rivas <jerivasmelgar@gmail.com>\n"
"Language-Team: Español; Castellano <>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Generator: Gtranslator 2.91.6\n"

#: ../model-customization.rst:3
msgid "Model Customization"
msgstr "Personalización de modelos"

#: ../model-customization.rst:5
msgid ""
"So far under :doc:`content-architecture` the concept of subclassing "
"Mezzanine's models has been described. This section describes the hooks "
"Mezzanine provides for directly modifying the behaviour of its models."
msgstr ""
"En la sección de :doc:`content-architecture` se ha descrito el concepto de "
"crear subclases de los modelos de Mezzanine. Esta sección describe los "
"ganchos que Mezzanine provee para modificar directamente el comportamiento "
"de sus modelos."

#: ../model-customization.rst:10
msgid "Field Injection"
msgstr "Inyección de campos"

#: ../model-customization.rst:12
msgid ""
"Mezzanine provides the setting ``EXTRA_MODEL_FIELDS`` which allows you to "
"define a sequence of fields that will be injected into Mezzanine's (or any "
"library's) models."
msgstr ""
"Mezzanine provee la variable de configuración ``EXTRA_MODEL_FIELDS`` que "
"permite al desarrollador definir una secuencia de campos que será inyectados "
"a los modelos de Mezzanine (o de cualquier librería)."

#: ../model-customization.rst:18
msgid ""
"Using the following approach comes with certain trade-offs described below "
"in :ref:`field-injection-caveats`. Be sure to fully understand these prior "
"to using the ``EXTRA_MODEL_FIELDS`` setting."
msgstr ""
"Hacer uso de esta utilidad implica algunas desventajas que se describen más "
"adelante en :ref:`field-injection-caveats`. Es importante que estas "
"desventajas se comprendan por completo antes de hacer uso de "
"``EXTRA_MODEL_FIELDS``."

#: ../model-customization.rst:22
msgid ""
"Each item in the ``EXTRA_MODEL_FIELDS`` sequence is a four item sequence. "
"The first two items are the dotted path to the model and its field name to "
"be added, and the dotted path to the field class to use for the field. The "
"third and fourth items are a sequence of positional args and a dictionary of "
"keyword args, to use when creating the field instance."
msgstr ""
"Cada elemento de ``EXTRA_MODEL_FIELDS`` es una secuencia de cuatro "
"elementos. Los primeros dos elementos son las rutas punteadas al modelo y al "
"campo que se le añadirá. Los últimos dos elementos son una secuencia de "
"argumentos posicionales y un diccionario de argumentos de palabras clave, "
"que serán usados al crear la instancia del campo de modelo."

#: ../model-customization.rst:29
msgid ""
"For example suppose you want to inject a custom ``ImageField`` from a third "
"party library into Mezzanine's ``BlogPost`` model, you would define the "
"following in your projects’s settings module::"
msgstr ""
"Por ejemplo, supóngase que se quiere inyectar un campo ``ImageField`` "
"personalizado de una librería de terceros al modelo ``BlogPost`` de "
"Mezzanine. La configuración adecuada es la siguiente::"

#: ../model-customization.rst:47
msgid ""
"Each ``BlogPost`` instance will now have an ``image`` attribute, using the "
"``ImageField`` class defined in the fictitious ``somelib.fields`` module."
msgstr ""
"Cada instancia de ``BlogPost`` ahora tendrá un atributo llamado ``image``, "
"que hará uso de la clase ``ImageField`` definida en el módulo ficticio "
"``somelib.fields``."

#: ../model-customization.rst:50
msgid ""
"Another interesting example would be adding a field to all of Mezzanine's "
"content types by injecting fields into the ``Page`` class. Continuing on "
"from the previous example, suppose you wanted to add a regular Django "
"``IntegerField`` to all content types::"
msgstr ""
"Otro ejemplo interesante es el de añadir un campo a todos los tipos de "
"contenido de Mezzanine al inyectar campos en la clase ``Page``. Continuando "
"con el ejemplo anterior, supóngase que se quiere añadir un campo "
"``IntegerField`` de Django a todos los tipos de contenido::"

#: ../model-customization.rst:71
msgid ""
"Note here that the full path for the field class isn't required since a "
"regular Django field is used - the ``django.db.models.`` path is implied."
msgstr ""
"Nótese que la ruta completa no es utilizada para este campo, ya que al ser "
"un campo regular de Django, la ruta ``django.db.models`` está implícita."

#: ../model-customization.rst:77
msgid "Field Injection Caveats"
msgstr "Problemas con la inyección de campos"

#: ../model-customization.rst:79
msgid ""
"The above technique provides a great way of avoiding the performance "
"penalties of SQL JOINS required by the traditional approach of `subclassing "
"models <https://docs.djangoproject.com/en/1.3/topics/db/models/#multi-table-"
"inheritance>`_, however some extra consideration is required when used with "
"migration tools like `South <http://south.aeracode.org/>`_. In the first "
"example above, South views the new ``image`` field on the ``BlogPost`` model "
"of the ``mezzanine.blog`` app. As such in order to create a migration for "
"it, the migration must be created for the blog app itself and by default "
"would end up in the migrations directory of the blog app, which completely "
"goes against the notion of not modifying the blog app to add your own custom "
"fields."
msgstr ""
"La técnica de inyección de campos provee una manera de evitar las "
"penalidades en desempeño de los SQL JOINS requeridos por el enfoque "
"tradicional de `hacer subclases de modelos <https://docs.djangoproject.com/"
"en/1.3/topics/db/models/#multi-table-inheritance>`_, sin embargo, requiere "
"de consideraciones adicionales a la hora de hacer uso de herramientas de "
"migración como `South <http://south.aeracode.org/>`_. En el primer ejemplo, "
"South detecta el nuevo campo ``image`` como parte del modelo ``BlogPost`` de "
"la aplicación ``mezzanine.blog``. Por esta causa, la migración será creada "
"en la aplicación original de blogs, y por defecto todas las migraciones "
"terminarán en el el directorio de migraciones de la aplicación de blogs, lo "
"cual es completamente opuesto a la noción de no modificar la aplicación de "
"blogs para añadir los campos personalizados."

#: ../model-customization.rst:91
msgid ""
"One approach to address this is to use the ``--stdout`` argument of South's "
"``schemamigration`` command, and create your own migration file located "
"somewhere in your project or app::"
msgstr ""
"Un enfoque para solucionar esto es utilizar el argumento ``--stdout`` en el "
"comando ``schemamigration`` de South, y crear un archivo de migraciones "
"personalizado localizado en otra ubicación dentro del proyecto o aplicación::"

#: ../model-customization.rst:98
msgid ""
"Be warned that over time this approach will almost certainly require some "
"manual intervention by way of editing migrations, or modifying the database "
"manually to create the correct state. Ultimately there is a trade-off "
"involved here."
msgstr ""
"Se debe advertir que este enfoque requerirá de intervención manual a la "
"larga a través de la edición manual de migraciones, o modificaciones "
"manuales a la base de datos para lograr el estado deseado. En última "
"instancia, cualquier enfoque utilizado tiene sus ventajas y desventajas."

#: ../model-customization.rst:104
msgid "Admin Fields"
msgstr "Campos personalizados en la interfaz administrativa"

#: ../model-customization.rst:106
msgid ""
"Whether using the above approach to inject fields onto models, or taking the "
"more traditional approach of subclassing models, most often you will also "
"want to expose new fields to the admin interface. This can be achieve by "
"simply unregistering the relevant admin class, subclassing it, and re-"
"registering your new admin class for the associated model. Continuing on "
"from the first example, the code below takes a copy of the ``fieldsets`` "
"definition for the original ``BlogPostAdmin``, and injects our custom "
"field's name into the desired position.::"
msgstr ""
"Al utilizar el enfoque de inyección de campos o el de creación de subclases, "
"normalmente se desea también exponer los nuevos campos en la interfaz "
"administrativa. Esto puede lograrse simplemente de-registrando la clase "
"admin relevante, creando una subclase de ella, y re-registrando una nueva "
"clase admin para el modelo asociado. Siguiendo con el ejemplo anterior, el "
"siguiente código toma una copia de la definición de ``fieldsets`` de la "
"clase original ``BlogPostAdmin``, y luego inyecta el nombre del campo "
"personalizado en la posición deseada.::"
